// Code generated by protoc-gen-go-resource. DO NOT EDIT.
package storagev1

import (
	"fmt"
	"strings"
)

type ParsedProjectName struct {
	ProjectID string
}

func ParseProjectName(s string) (ParsedProjectName, error) {
	p := strings.Split(s, "/")
	if len(p) != 2 {
		return ParsedProjectName{}, fmt.Errorf("parse %q: bad number of segments, want: 2, got: %d", s, len(p))
	}

	var out ParsedProjectName

	if p[0] != "projects" {
		return ParsedProjectName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "projects", p[0])
	}

	out.ProjectID = p[1]

	return out, nil
}

func ParseFullProjectName(s string) (ParsedProjectName, error) {
	if !strings.HasPrefix(s, "//storage.google.com/") {
		return ParsedProjectName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//storage.google.com/")
	}

	return ParseProjectName(strings.TrimPrefix(s, "//storage.google.com/"))
}

func (n ParsedProjectName) Name() string {
	var out string

	out += "projects"

	out += "/"

	out += n.ProjectID

	return out
}

func (n ParsedProjectName) FullName() string {
	return "//storage.google.com/" + n.Name()
}

type ParsedBucketName struct {
	ProjectID string

	BucketID string
}

func ParseBucketName(s string) (ParsedBucketName, error) {
	p := strings.Split(s, "/")
	if len(p) != 4 {
		return ParsedBucketName{}, fmt.Errorf("parse %q: bad number of segments, want: 4, got: %d", s, len(p))
	}

	var out ParsedBucketName

	if p[0] != "projects" {
		return ParsedBucketName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "projects", p[0])
	}

	out.ProjectID = p[1]

	if p[2] != "buckets" {
		return ParsedBucketName{}, fmt.Errorf("parse %q: bad segment 2, want: %q, got: %q", s, "buckets", p[2])
	}

	out.BucketID = p[3]

	return out, nil
}

func ParseFullBucketName(s string) (ParsedBucketName, error) {
	if !strings.HasPrefix(s, "//storage.google.com/") {
		return ParsedBucketName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//storage.google.com/")
	}

	return ParseBucketName(strings.TrimPrefix(s, "//storage.google.com/"))
}

func (n ParsedBucketName) Name() string {
	var out string

	out += "projects"

	out += "/"

	out += n.ProjectID

	out += "/"

	out += "buckets"

	out += "/"

	out += n.BucketID

	return out
}

func (n ParsedBucketName) FullName() string {
	return "//storage.google.com/" + n.Name()
}

type ParsedObjectName struct {
	ProjectID string

	BucketID string

	ObjectID string
}

func ParseObjectName(s string) (ParsedObjectName, error) {
	p := strings.Split(s, "/")
	if len(p) != 6 {
		return ParsedObjectName{}, fmt.Errorf("parse %q: bad number of segments, want: 6, got: %d", s, len(p))
	}

	var out ParsedObjectName

	if p[0] != "projects" {
		return ParsedObjectName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "projects", p[0])
	}

	out.ProjectID = p[1]

	if p[2] != "buckets" {
		return ParsedObjectName{}, fmt.Errorf("parse %q: bad segment 2, want: %q, got: %q", s, "buckets", p[2])
	}

	out.BucketID = p[3]

	if p[4] != "objects" {
		return ParsedObjectName{}, fmt.Errorf("parse %q: bad segment 4, want: %q, got: %q", s, "objects", p[4])
	}

	out.ObjectID = p[5]

	return out, nil
}

func ParseFullObjectName(s string) (ParsedObjectName, error) {
	if !strings.HasPrefix(s, "//storage.google.com/") {
		return ParsedObjectName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//storage.google.com/")
	}

	return ParseObjectName(strings.TrimPrefix(s, "//storage.google.com/"))
}

func (n ParsedObjectName) Name() string {
	var out string

	out += "projects"

	out += "/"

	out += n.ProjectID

	out += "/"

	out += "buckets"

	out += "/"

	out += n.BucketID

	out += "/"

	out += "objects"

	out += "/"

	out += n.ObjectID

	return out
}

func (n ParsedObjectName) FullName() string {
	return "//storage.google.com/" + n.Name()
}
