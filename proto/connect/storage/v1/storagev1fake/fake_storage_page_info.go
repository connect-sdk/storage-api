// Code generated by counterfeiter. DO NOT EDIT.
package storagev1fake

import (
	"sync"

	storagev1 "github.com/connect-sdk/storage-api/proto/connect/storage/v1"
)

type FakeStoragePageInfo struct {
	MaxSizeStub        func() int
	maxSizeMutex       sync.RWMutex
	maxSizeArgsForCall []struct {
	}
	maxSizeReturns struct {
		result1 int
	}
	maxSizeReturnsOnCall map[int]struct {
		result1 int
	}
	RemainingStub        func() int
	remainingMutex       sync.RWMutex
	remainingArgsForCall []struct {
	}
	remainingReturns struct {
		result1 int
	}
	remainingReturnsOnCall map[int]struct {
		result1 int
	}
	TokenStub        func() string
	tokenMutex       sync.RWMutex
	tokenArgsForCall []struct {
	}
	tokenReturns struct {
		result1 string
	}
	tokenReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoragePageInfo) MaxSize() int {
	fake.maxSizeMutex.Lock()
	ret, specificReturn := fake.maxSizeReturnsOnCall[len(fake.maxSizeArgsForCall)]
	fake.maxSizeArgsForCall = append(fake.maxSizeArgsForCall, struct {
	}{})
	stub := fake.MaxSizeStub
	fakeReturns := fake.maxSizeReturns
	fake.recordInvocation("MaxSize", []interface{}{})
	fake.maxSizeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoragePageInfo) MaxSizeCallCount() int {
	fake.maxSizeMutex.RLock()
	defer fake.maxSizeMutex.RUnlock()
	return len(fake.maxSizeArgsForCall)
}

func (fake *FakeStoragePageInfo) MaxSizeCalls(stub func() int) {
	fake.maxSizeMutex.Lock()
	defer fake.maxSizeMutex.Unlock()
	fake.MaxSizeStub = stub
}

func (fake *FakeStoragePageInfo) MaxSizeReturns(result1 int) {
	fake.maxSizeMutex.Lock()
	defer fake.maxSizeMutex.Unlock()
	fake.MaxSizeStub = nil
	fake.maxSizeReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeStoragePageInfo) MaxSizeReturnsOnCall(i int, result1 int) {
	fake.maxSizeMutex.Lock()
	defer fake.maxSizeMutex.Unlock()
	fake.MaxSizeStub = nil
	if fake.maxSizeReturnsOnCall == nil {
		fake.maxSizeReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.maxSizeReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeStoragePageInfo) Remaining() int {
	fake.remainingMutex.Lock()
	ret, specificReturn := fake.remainingReturnsOnCall[len(fake.remainingArgsForCall)]
	fake.remainingArgsForCall = append(fake.remainingArgsForCall, struct {
	}{})
	stub := fake.RemainingStub
	fakeReturns := fake.remainingReturns
	fake.recordInvocation("Remaining", []interface{}{})
	fake.remainingMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoragePageInfo) RemainingCallCount() int {
	fake.remainingMutex.RLock()
	defer fake.remainingMutex.RUnlock()
	return len(fake.remainingArgsForCall)
}

func (fake *FakeStoragePageInfo) RemainingCalls(stub func() int) {
	fake.remainingMutex.Lock()
	defer fake.remainingMutex.Unlock()
	fake.RemainingStub = stub
}

func (fake *FakeStoragePageInfo) RemainingReturns(result1 int) {
	fake.remainingMutex.Lock()
	defer fake.remainingMutex.Unlock()
	fake.RemainingStub = nil
	fake.remainingReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeStoragePageInfo) RemainingReturnsOnCall(i int, result1 int) {
	fake.remainingMutex.Lock()
	defer fake.remainingMutex.Unlock()
	fake.RemainingStub = nil
	if fake.remainingReturnsOnCall == nil {
		fake.remainingReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.remainingReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeStoragePageInfo) Token() string {
	fake.tokenMutex.Lock()
	ret, specificReturn := fake.tokenReturnsOnCall[len(fake.tokenArgsForCall)]
	fake.tokenArgsForCall = append(fake.tokenArgsForCall, struct {
	}{})
	stub := fake.TokenStub
	fakeReturns := fake.tokenReturns
	fake.recordInvocation("Token", []interface{}{})
	fake.tokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoragePageInfo) TokenCallCount() int {
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	return len(fake.tokenArgsForCall)
}

func (fake *FakeStoragePageInfo) TokenCalls(stub func() string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = stub
}

func (fake *FakeStoragePageInfo) TokenReturns(result1 string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = nil
	fake.tokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStoragePageInfo) TokenReturnsOnCall(i int, result1 string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = nil
	if fake.tokenReturnsOnCall == nil {
		fake.tokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.tokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStoragePageInfo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.maxSizeMutex.RLock()
	defer fake.maxSizeMutex.RUnlock()
	fake.remainingMutex.RLock()
	defer fake.remainingMutex.RUnlock()
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoragePageInfo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storagev1.StoragePageInfo = new(FakeStoragePageInfo)
