// Code generated by counterfeiter. DO NOT EDIT.
package storagev1fake

import (
	"context"
	"sync"

	storagev1 "github.com/connect-sdk/storage-api/proto/connect/storage/v1"
)

type FakeStorageObjectEventHandler struct {
	HandleStorageObjectEventStub        func(context.Context, storagev1.StorageObjectEvent) error
	handleStorageObjectEventMutex       sync.RWMutex
	handleStorageObjectEventArgsForCall []struct {
		arg1 context.Context
		arg2 storagev1.StorageObjectEvent
	}
	handleStorageObjectEventReturns struct {
		result1 error
	}
	handleStorageObjectEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageObjectEventHandler) HandleStorageObjectEvent(arg1 context.Context, arg2 storagev1.StorageObjectEvent) error {
	fake.handleStorageObjectEventMutex.Lock()
	ret, specificReturn := fake.handleStorageObjectEventReturnsOnCall[len(fake.handleStorageObjectEventArgsForCall)]
	fake.handleStorageObjectEventArgsForCall = append(fake.handleStorageObjectEventArgsForCall, struct {
		arg1 context.Context
		arg2 storagev1.StorageObjectEvent
	}{arg1, arg2})
	stub := fake.HandleStorageObjectEventStub
	fakeReturns := fake.handleStorageObjectEventReturns
	fake.recordInvocation("HandleStorageObjectEvent", []interface{}{arg1, arg2})
	fake.handleStorageObjectEventMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectEventHandler) HandleStorageObjectEventCallCount() int {
	fake.handleStorageObjectEventMutex.RLock()
	defer fake.handleStorageObjectEventMutex.RUnlock()
	return len(fake.handleStorageObjectEventArgsForCall)
}

func (fake *FakeStorageObjectEventHandler) HandleStorageObjectEventCalls(stub func(context.Context, storagev1.StorageObjectEvent) error) {
	fake.handleStorageObjectEventMutex.Lock()
	defer fake.handleStorageObjectEventMutex.Unlock()
	fake.HandleStorageObjectEventStub = stub
}

func (fake *FakeStorageObjectEventHandler) HandleStorageObjectEventArgsForCall(i int) (context.Context, storagev1.StorageObjectEvent) {
	fake.handleStorageObjectEventMutex.RLock()
	defer fake.handleStorageObjectEventMutex.RUnlock()
	argsForCall := fake.handleStorageObjectEventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorageObjectEventHandler) HandleStorageObjectEventReturns(result1 error) {
	fake.handleStorageObjectEventMutex.Lock()
	defer fake.handleStorageObjectEventMutex.Unlock()
	fake.HandleStorageObjectEventStub = nil
	fake.handleStorageObjectEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageObjectEventHandler) HandleStorageObjectEventReturnsOnCall(i int, result1 error) {
	fake.handleStorageObjectEventMutex.Lock()
	defer fake.handleStorageObjectEventMutex.Unlock()
	fake.HandleStorageObjectEventStub = nil
	if fake.handleStorageObjectEventReturnsOnCall == nil {
		fake.handleStorageObjectEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleStorageObjectEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageObjectEventHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleStorageObjectEventMutex.RLock()
	defer fake.handleStorageObjectEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorageObjectEventHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storagev1.StorageObjectEventHandler = new(FakeStorageObjectEventHandler)
