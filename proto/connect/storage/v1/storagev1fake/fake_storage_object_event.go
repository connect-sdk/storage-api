// Code generated by counterfeiter. DO NOT EDIT.
package storagev1fake

import (
	"sync"

	storagev1 "github.com/connect-sdk/storage-api/proto/connect/storage/v1"
)

type FakeStorageObjectEvent struct {
	GetObjectStub        func() *storagev1.StorageObject
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
	}
	getObjectReturns struct {
		result1 *storagev1.StorageObject
	}
	getObjectReturnsOnCall map[int]struct {
		result1 *storagev1.StorageObject
	}
	SetObjectStub        func(*storagev1.StorageObject)
	setObjectMutex       sync.RWMutex
	setObjectArgsForCall []struct {
		arg1 *storagev1.StorageObject
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageObjectEvent) GetObject() *storagev1.StorageObject {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
	}{})
	stub := fake.GetObjectStub
	fakeReturns := fake.getObjectReturns
	fake.recordInvocation("GetObject", []interface{}{})
	fake.getObjectMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectEvent) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *FakeStorageObjectEvent) GetObjectCalls(stub func() *storagev1.StorageObject) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *FakeStorageObjectEvent) GetObjectReturns(result1 *storagev1.StorageObject) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 *storagev1.StorageObject
	}{result1}
}

func (fake *FakeStorageObjectEvent) GetObjectReturnsOnCall(i int, result1 *storagev1.StorageObject) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 *storagev1.StorageObject
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 *storagev1.StorageObject
	}{result1}
}

func (fake *FakeStorageObjectEvent) SetObject(arg1 *storagev1.StorageObject) {
	fake.setObjectMutex.Lock()
	fake.setObjectArgsForCall = append(fake.setObjectArgsForCall, struct {
		arg1 *storagev1.StorageObject
	}{arg1})
	stub := fake.SetObjectStub
	fake.recordInvocation("SetObject", []interface{}{arg1})
	fake.setObjectMutex.Unlock()
	if stub != nil {
		fake.SetObjectStub(arg1)
	}
}

func (fake *FakeStorageObjectEvent) SetObjectCallCount() int {
	fake.setObjectMutex.RLock()
	defer fake.setObjectMutex.RUnlock()
	return len(fake.setObjectArgsForCall)
}

func (fake *FakeStorageObjectEvent) SetObjectCalls(stub func(*storagev1.StorageObject)) {
	fake.setObjectMutex.Lock()
	defer fake.setObjectMutex.Unlock()
	fake.SetObjectStub = stub
}

func (fake *FakeStorageObjectEvent) SetObjectArgsForCall(i int) *storagev1.StorageObject {
	fake.setObjectMutex.RLock()
	defer fake.setObjectMutex.RUnlock()
	argsForCall := fake.setObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageObjectEvent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.setObjectMutex.RLock()
	defer fake.setObjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorageObjectEvent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storagev1.StorageObjectEvent = new(FakeStorageObjectEvent)
