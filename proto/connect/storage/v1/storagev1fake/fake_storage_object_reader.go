// Code generated by counterfeiter. DO NOT EDIT.
package storagev1fake

import (
	"sync"

	storagev1 "github.com/connect-sdk/storage-api/proto/connect/storage/v1"
)

type FakeStorageObjectReader struct {
	CacheControlStub        func() string
	cacheControlMutex       sync.RWMutex
	cacheControlArgsForCall []struct {
	}
	cacheControlReturns struct {
		result1 string
	}
	cacheControlReturnsOnCall map[int]struct {
		result1 string
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ContentEncodingStub        func() string
	contentEncodingMutex       sync.RWMutex
	contentEncodingArgsForCall []struct {
	}
	contentEncodingReturns struct {
		result1 string
	}
	contentEncodingReturnsOnCall map[int]struct {
		result1 string
	}
	ContentTypeStub        func() string
	contentTypeMutex       sync.RWMutex
	contentTypeArgsForCall []struct {
	}
	contentTypeReturns struct {
		result1 string
	}
	contentTypeReturnsOnCall map[int]struct {
		result1 string
	}
	ReadStub        func([]byte) (int, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		arg1 []byte
	}
	readReturns struct {
		result1 int
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	RemainStub        func() int64
	remainMutex       sync.RWMutex
	remainArgsForCall []struct {
	}
	remainReturns struct {
		result1 int64
	}
	remainReturnsOnCall map[int]struct {
		result1 int64
	}
	SizeStub        func() int64
	sizeMutex       sync.RWMutex
	sizeArgsForCall []struct {
	}
	sizeReturns struct {
		result1 int64
	}
	sizeReturnsOnCall map[int]struct {
		result1 int64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageObjectReader) CacheControl() string {
	fake.cacheControlMutex.Lock()
	ret, specificReturn := fake.cacheControlReturnsOnCall[len(fake.cacheControlArgsForCall)]
	fake.cacheControlArgsForCall = append(fake.cacheControlArgsForCall, struct {
	}{})
	stub := fake.CacheControlStub
	fakeReturns := fake.cacheControlReturns
	fake.recordInvocation("CacheControl", []interface{}{})
	fake.cacheControlMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectReader) CacheControlCallCount() int {
	fake.cacheControlMutex.RLock()
	defer fake.cacheControlMutex.RUnlock()
	return len(fake.cacheControlArgsForCall)
}

func (fake *FakeStorageObjectReader) CacheControlCalls(stub func() string) {
	fake.cacheControlMutex.Lock()
	defer fake.cacheControlMutex.Unlock()
	fake.CacheControlStub = stub
}

func (fake *FakeStorageObjectReader) CacheControlReturns(result1 string) {
	fake.cacheControlMutex.Lock()
	defer fake.cacheControlMutex.Unlock()
	fake.CacheControlStub = nil
	fake.cacheControlReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStorageObjectReader) CacheControlReturnsOnCall(i int, result1 string) {
	fake.cacheControlMutex.Lock()
	defer fake.cacheControlMutex.Unlock()
	fake.CacheControlStub = nil
	if fake.cacheControlReturnsOnCall == nil {
		fake.cacheControlReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cacheControlReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStorageObjectReader) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectReader) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeStorageObjectReader) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeStorageObjectReader) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageObjectReader) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageObjectReader) ContentEncoding() string {
	fake.contentEncodingMutex.Lock()
	ret, specificReturn := fake.contentEncodingReturnsOnCall[len(fake.contentEncodingArgsForCall)]
	fake.contentEncodingArgsForCall = append(fake.contentEncodingArgsForCall, struct {
	}{})
	stub := fake.ContentEncodingStub
	fakeReturns := fake.contentEncodingReturns
	fake.recordInvocation("ContentEncoding", []interface{}{})
	fake.contentEncodingMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectReader) ContentEncodingCallCount() int {
	fake.contentEncodingMutex.RLock()
	defer fake.contentEncodingMutex.RUnlock()
	return len(fake.contentEncodingArgsForCall)
}

func (fake *FakeStorageObjectReader) ContentEncodingCalls(stub func() string) {
	fake.contentEncodingMutex.Lock()
	defer fake.contentEncodingMutex.Unlock()
	fake.ContentEncodingStub = stub
}

func (fake *FakeStorageObjectReader) ContentEncodingReturns(result1 string) {
	fake.contentEncodingMutex.Lock()
	defer fake.contentEncodingMutex.Unlock()
	fake.ContentEncodingStub = nil
	fake.contentEncodingReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStorageObjectReader) ContentEncodingReturnsOnCall(i int, result1 string) {
	fake.contentEncodingMutex.Lock()
	defer fake.contentEncodingMutex.Unlock()
	fake.ContentEncodingStub = nil
	if fake.contentEncodingReturnsOnCall == nil {
		fake.contentEncodingReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.contentEncodingReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStorageObjectReader) ContentType() string {
	fake.contentTypeMutex.Lock()
	ret, specificReturn := fake.contentTypeReturnsOnCall[len(fake.contentTypeArgsForCall)]
	fake.contentTypeArgsForCall = append(fake.contentTypeArgsForCall, struct {
	}{})
	stub := fake.ContentTypeStub
	fakeReturns := fake.contentTypeReturns
	fake.recordInvocation("ContentType", []interface{}{})
	fake.contentTypeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectReader) ContentTypeCallCount() int {
	fake.contentTypeMutex.RLock()
	defer fake.contentTypeMutex.RUnlock()
	return len(fake.contentTypeArgsForCall)
}

func (fake *FakeStorageObjectReader) ContentTypeCalls(stub func() string) {
	fake.contentTypeMutex.Lock()
	defer fake.contentTypeMutex.Unlock()
	fake.ContentTypeStub = stub
}

func (fake *FakeStorageObjectReader) ContentTypeReturns(result1 string) {
	fake.contentTypeMutex.Lock()
	defer fake.contentTypeMutex.Unlock()
	fake.ContentTypeStub = nil
	fake.contentTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStorageObjectReader) ContentTypeReturnsOnCall(i int, result1 string) {
	fake.contentTypeMutex.Lock()
	defer fake.contentTypeMutex.Unlock()
	fake.ContentTypeStub = nil
	if fake.contentTypeReturnsOnCall == nil {
		fake.contentTypeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.contentTypeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStorageObjectReader) Read(arg1 []byte) (int, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.ReadStub
	fakeReturns := fake.readReturns
	fake.recordInvocation("Read", []interface{}{arg1Copy})
	fake.readMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageObjectReader) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeStorageObjectReader) ReadCalls(stub func([]byte) (int, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *FakeStorageObjectReader) ReadArgsForCall(i int) []byte {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	argsForCall := fake.readArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageObjectReader) ReadReturns(result1 int, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageObjectReader) ReadReturnsOnCall(i int, result1 int, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageObjectReader) Remain() int64 {
	fake.remainMutex.Lock()
	ret, specificReturn := fake.remainReturnsOnCall[len(fake.remainArgsForCall)]
	fake.remainArgsForCall = append(fake.remainArgsForCall, struct {
	}{})
	stub := fake.RemainStub
	fakeReturns := fake.remainReturns
	fake.recordInvocation("Remain", []interface{}{})
	fake.remainMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectReader) RemainCallCount() int {
	fake.remainMutex.RLock()
	defer fake.remainMutex.RUnlock()
	return len(fake.remainArgsForCall)
}

func (fake *FakeStorageObjectReader) RemainCalls(stub func() int64) {
	fake.remainMutex.Lock()
	defer fake.remainMutex.Unlock()
	fake.RemainStub = stub
}

func (fake *FakeStorageObjectReader) RemainReturns(result1 int64) {
	fake.remainMutex.Lock()
	defer fake.remainMutex.Unlock()
	fake.RemainStub = nil
	fake.remainReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeStorageObjectReader) RemainReturnsOnCall(i int, result1 int64) {
	fake.remainMutex.Lock()
	defer fake.remainMutex.Unlock()
	fake.RemainStub = nil
	if fake.remainReturnsOnCall == nil {
		fake.remainReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.remainReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *FakeStorageObjectReader) Size() int64 {
	fake.sizeMutex.Lock()
	ret, specificReturn := fake.sizeReturnsOnCall[len(fake.sizeArgsForCall)]
	fake.sizeArgsForCall = append(fake.sizeArgsForCall, struct {
	}{})
	stub := fake.SizeStub
	fakeReturns := fake.sizeReturns
	fake.recordInvocation("Size", []interface{}{})
	fake.sizeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageObjectReader) SizeCallCount() int {
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	return len(fake.sizeArgsForCall)
}

func (fake *FakeStorageObjectReader) SizeCalls(stub func() int64) {
	fake.sizeMutex.Lock()
	defer fake.sizeMutex.Unlock()
	fake.SizeStub = stub
}

func (fake *FakeStorageObjectReader) SizeReturns(result1 int64) {
	fake.sizeMutex.Lock()
	defer fake.sizeMutex.Unlock()
	fake.SizeStub = nil
	fake.sizeReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeStorageObjectReader) SizeReturnsOnCall(i int, result1 int64) {
	fake.sizeMutex.Lock()
	defer fake.sizeMutex.Unlock()
	fake.SizeStub = nil
	if fake.sizeReturnsOnCall == nil {
		fake.sizeReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.sizeReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *FakeStorageObjectReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cacheControlMutex.RLock()
	defer fake.cacheControlMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.contentEncodingMutex.RLock()
	defer fake.contentEncodingMutex.RUnlock()
	fake.contentTypeMutex.RLock()
	defer fake.contentTypeMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.remainMutex.RLock()
	defer fake.remainMutex.RUnlock()
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorageObjectReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storagev1.StorageObjectReader = new(FakeStorageObjectReader)
