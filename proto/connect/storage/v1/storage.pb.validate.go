// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: connect/storage/v1/storage.proto

package storagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StorageObject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StorageObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageObject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StorageObjectMultiError, or
// nil if none found.
func (m *StorageObject) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContentEncoding

	// no validation rules for ContentDisposition

	// no validation rules for CacheControl

	// no validation rules for ContentLanguage

	// no validation rules for Metageneration

	if all {
		switch v := interface{}(m.GetTimeDeleted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "TimeDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "TimeDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeDeleted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectValidationError{
				field:  "TimeDeleted",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ContentType

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Crc32C

	// no validation rules for ComponentCount

	// no validation rules for Md5Hash

	// no validation rules for Etag

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StorageClass

	// no validation rules for KmsKeyName

	if all {
		switch v := interface{}(m.GetTimeStorageClassUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "TimeStorageClassUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "TimeStorageClassUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeStorageClassUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectValidationError{
				field:  "TimeStorageClassUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TemporaryHold

	if all {
		switch v := interface{}(m.GetRetentionExpirationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "RetentionExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "RetentionExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetentionExpirationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectValidationError{
				field:  "RetentionExpirationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	// no validation rules for EventBasedHold

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Bucket

	// no validation rules for Generation

	if all {
		switch v := interface{}(m.GetCustomerEncryption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "CustomerEncryption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectValidationError{
					field:  "CustomerEncryption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomerEncryption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectValidationError{
				field:  "CustomerEncryption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MediaLink

	// no validation rules for SelfLink

	// no validation rules for Kind

	if len(errors) > 0 {
		return StorageObjectMultiError(errors)
	}

	return nil
}

// StorageObjectMultiError is an error wrapping multiple validation errors
// returned by StorageObject.ValidateAll() if the designated constraints
// aren't met.
type StorageObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageObjectMultiError) AllErrors() []error { return m }

// StorageObjectValidationError is the validation error returned by
// StorageObject.Validate if the designated constraints aren't met.
type StorageObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageObjectValidationError) ErrorName() string { return "StorageObjectValidationError" }

// Error satisfies the builtin error interface
func (e StorageObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageObjectValidationError{}

// Validate checks the field values on StorageObjectFinalizedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageObjectFinalizedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageObjectFinalizedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageObjectFinalizedEventMultiError, or nil if none found.
func (m *StorageObjectFinalizedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageObjectFinalizedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObject() == nil {
		err := StorageObjectFinalizedEventValidationError{
			field:  "Object",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectFinalizedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectFinalizedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectFinalizedEventValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StorageObjectFinalizedEventMultiError(errors)
	}

	return nil
}

// StorageObjectFinalizedEventMultiError is an error wrapping multiple
// validation errors returned by StorageObjectFinalizedEvent.ValidateAll() if
// the designated constraints aren't met.
type StorageObjectFinalizedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageObjectFinalizedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageObjectFinalizedEventMultiError) AllErrors() []error { return m }

// StorageObjectFinalizedEventValidationError is the validation error returned
// by StorageObjectFinalizedEvent.Validate if the designated constraints
// aren't met.
type StorageObjectFinalizedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageObjectFinalizedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageObjectFinalizedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageObjectFinalizedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageObjectFinalizedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageObjectFinalizedEventValidationError) ErrorName() string {
	return "StorageObjectFinalizedEventValidationError"
}

// Error satisfies the builtin error interface
func (e StorageObjectFinalizedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageObjectFinalizedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageObjectFinalizedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageObjectFinalizedEventValidationError{}

// Validate checks the field values on StorageObjectArchivedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageObjectArchivedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageObjectArchivedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageObjectArchivedEventMultiError, or nil if none found.
func (m *StorageObjectArchivedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageObjectArchivedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObject() == nil {
		err := StorageObjectArchivedEventValidationError{
			field:  "Object",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectArchivedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectArchivedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectArchivedEventValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StorageObjectArchivedEventMultiError(errors)
	}

	return nil
}

// StorageObjectArchivedEventMultiError is an error wrapping multiple
// validation errors returned by StorageObjectArchivedEvent.ValidateAll() if
// the designated constraints aren't met.
type StorageObjectArchivedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageObjectArchivedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageObjectArchivedEventMultiError) AllErrors() []error { return m }

// StorageObjectArchivedEventValidationError is the validation error returned
// by StorageObjectArchivedEvent.Validate if the designated constraints aren't met.
type StorageObjectArchivedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageObjectArchivedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageObjectArchivedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageObjectArchivedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageObjectArchivedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageObjectArchivedEventValidationError) ErrorName() string {
	return "StorageObjectArchivedEventValidationError"
}

// Error satisfies the builtin error interface
func (e StorageObjectArchivedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageObjectArchivedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageObjectArchivedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageObjectArchivedEventValidationError{}

// Validate checks the field values on StorageObjectDeletedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageObjectDeletedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageObjectDeletedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageObjectDeletedEventMultiError, or nil if none found.
func (m *StorageObjectDeletedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageObjectDeletedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObject() == nil {
		err := StorageObjectDeletedEventValidationError{
			field:  "Object",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectDeletedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectDeletedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectDeletedEventValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StorageObjectDeletedEventMultiError(errors)
	}

	return nil
}

// StorageObjectDeletedEventMultiError is an error wrapping multiple validation
// errors returned by StorageObjectDeletedEvent.ValidateAll() if the
// designated constraints aren't met.
type StorageObjectDeletedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageObjectDeletedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageObjectDeletedEventMultiError) AllErrors() []error { return m }

// StorageObjectDeletedEventValidationError is the validation error returned by
// StorageObjectDeletedEvent.Validate if the designated constraints aren't met.
type StorageObjectDeletedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageObjectDeletedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageObjectDeletedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageObjectDeletedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageObjectDeletedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageObjectDeletedEventValidationError) ErrorName() string {
	return "StorageObjectDeletedEventValidationError"
}

// Error satisfies the builtin error interface
func (e StorageObjectDeletedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageObjectDeletedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageObjectDeletedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageObjectDeletedEventValidationError{}

// Validate checks the field values on StorageObjectMetadataUpdatedEvent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StorageObjectMetadataUpdatedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageObjectMetadataUpdatedEvent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StorageObjectMetadataUpdatedEventMultiError, or nil if none found.
func (m *StorageObjectMetadataUpdatedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageObjectMetadataUpdatedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObject() == nil {
		err := StorageObjectMetadataUpdatedEventValidationError{
			field:  "Object",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageObjectMetadataUpdatedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageObjectMetadataUpdatedEventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageObjectMetadataUpdatedEventValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StorageObjectMetadataUpdatedEventMultiError(errors)
	}

	return nil
}

// StorageObjectMetadataUpdatedEventMultiError is an error wrapping multiple
// validation errors returned by
// StorageObjectMetadataUpdatedEvent.ValidateAll() if the designated
// constraints aren't met.
type StorageObjectMetadataUpdatedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageObjectMetadataUpdatedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageObjectMetadataUpdatedEventMultiError) AllErrors() []error { return m }

// StorageObjectMetadataUpdatedEventValidationError is the validation error
// returned by StorageObjectMetadataUpdatedEvent.Validate if the designated
// constraints aren't met.
type StorageObjectMetadataUpdatedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageObjectMetadataUpdatedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageObjectMetadataUpdatedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageObjectMetadataUpdatedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageObjectMetadataUpdatedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageObjectMetadataUpdatedEventValidationError) ErrorName() string {
	return "StorageObjectMetadataUpdatedEventValidationError"
}

// Error satisfies the builtin error interface
func (e StorageObjectMetadataUpdatedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageObjectMetadataUpdatedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageObjectMetadataUpdatedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageObjectMetadataUpdatedEventValidationError{}

// Validate checks the field values on StorageObject_CustomerEncryption with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StorageObject_CustomerEncryption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageObject_CustomerEncryption with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StorageObject_CustomerEncryptionMultiError, or nil if none found.
func (m *StorageObject_CustomerEncryption) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageObject_CustomerEncryption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EncryptionAlgorithm

	// no validation rules for KeySha256

	if len(errors) > 0 {
		return StorageObject_CustomerEncryptionMultiError(errors)
	}

	return nil
}

// StorageObject_CustomerEncryptionMultiError is an error wrapping multiple
// validation errors returned by
// StorageObject_CustomerEncryption.ValidateAll() if the designated
// constraints aren't met.
type StorageObject_CustomerEncryptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageObject_CustomerEncryptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageObject_CustomerEncryptionMultiError) AllErrors() []error { return m }

// StorageObject_CustomerEncryptionValidationError is the validation error
// returned by StorageObject_CustomerEncryption.Validate if the designated
// constraints aren't met.
type StorageObject_CustomerEncryptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageObject_CustomerEncryptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageObject_CustomerEncryptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageObject_CustomerEncryptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageObject_CustomerEncryptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageObject_CustomerEncryptionValidationError) ErrorName() string {
	return "StorageObject_CustomerEncryptionValidationError"
}

// Error satisfies the builtin error interface
func (e StorageObject_CustomerEncryptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageObject_CustomerEncryption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageObject_CustomerEncryptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageObject_CustomerEncryptionValidationError{}
